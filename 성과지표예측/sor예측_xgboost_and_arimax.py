# -*- coding: utf-8 -*-
"""SOR예측 XGBOOST and Arimax.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WrdEuUrT1-XT0GOOFFY8MxRCL0QdVX-v
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor

# 데이터 경로 설정
data_path = '/content/drive/MyDrive/농협/score백분위, min-max scaling 포함 데이터.csv'
data = pd.read_csv(data_path)

# 독립 변수와 종속 변수 정의
#etf_sor_100이 종속변수일때
#선택된 독립변수: 'yr1_tot_pft_rt', 'mxdd_z_sor_100'
#X = data[[col for col in data.columns if 'weighted' in col.lower()] +
#         ['crr_z_sor_100', 'mxdd_z_sor_100', 'vty_z_sor_100', "mm1_tot_pft_rt", "mm3_tot_pft_rt", "yr1_tot_pft_rt"]]
#y = data['etf_sor_100']

#crr_z_sor_100이 종속변수일때
#선택된 독립변수: "weighted_tot_hld_act_cnt", "vty_z_sor_100", "weighted_dist_hnk_pct90_nmv", "etf_sor_100", "weighted_tco_avg_hld_qty", "weighted_tco_avg_pft_rt"
#X = data[[col for col in data.columns if 'weighted' in col.lower()] +
#         ['etf_sor_100', 'mxdd_z_sor_100', 'vty_z_sor_100', "mm1_tot_pft_rt", "mm3_tot_pft_rt", "yr1_tot_pft_rt"]]
#y = data['crr_z_sor_100']

#mxdd_z_sor_100이 종속변수일때
#선택된 독립변수: "vty_z_sor_100", "etf_sor_100", "weighted_tco_avg_pft_rt"
#X = data[[col for col in data.columns if 'weighted' in col.lower()] +
#         ['etf_sor_100', 'crr_z_sor_100','vty_z_sor_100', "mm1_tot_pft_rt", "mm3_tot_pft_rt", "yr1_tot_pft_rt"]]
#y = data['mxdd_z_sor_100']

#vty_z_sor_100이 종속변수일때
#선택된 독립변수: "mxdd_z_sor_100", "yr1_tot_pft_rt", "weighted_tot_hld_act_cnt", "weighted_tco_avg_pft_rt", "weighted_tco_avg_phs_uit_pr"
#X = data[[col for col in data.columns if 'weighted' in col.lower()] +
#         ['etf_sor_100', 'crr_z_sor_100', 'mxdd_z_sor_100',"mm1_tot_pft_rt", "mm3_tot_pft_rt", "yr1_tot_pft_rt"]]
#y = data['vty_z_sor_100']

#mm1이 종속변수일때
#선택된 독립변수: mm3_tot_pft_rt, weighted_lss_ivo_rt, weighted_byn_cns_sum_qty, weighted_tot_hld_act_cnt,
#X = data[[col for col in data.columns if 'weighted' in col.lower()] +
#         ['etf_sor_100', 'crr_z_sor_100', 'mxdd_z_sor_100',"vty_z_sor_100", "mm3_tot_pft_rt", "yr1_tot_pft_rt"]]
#y = data['mm1_tot_pft_rt']

#mm3이 종속변수일때
#선택된 독립변수: weighted_lss_ivo_rt, yr1_tot_pft_rt, mm1_tot_pft_rt, etf_sor_100, weighted_tco_avg_eal_pls,weighted_sby_bse_xcg_rt
#X = data[[col for col in data.columns if 'weighted' in col.lower()] +
#         ['etf_sor_100', 'crr_z_sor_100', 'mxdd_z_sor_100',"vty_z_sor_100", "mm1_tot_pft_rt", "yr1_tot_pft_rt"]]
#y = data['mm3_tot_pft_rt']

#yr1이 종속변수일때
#선택된 독립변수: weighted_bf_dd_cmp_ind_rt, weighted_sll_cns_sum_qty, etf_sor_100, weighted_iem_end_pr, weighted_bf_dd_cmp_ind_pr, mm1_tot_pft_rt,  vty_z_sor_100
X = data[[col for col in data.columns if 'weighted' in col.lower()] +
         ['etf_sor_100', 'crr_z_sor_100', 'mxdd_z_sor_100',"vty_z_sor_100", "mm1_tot_pft_rt", "mm3_tot_pft_rt"]]
y = data['yr1_tot_pft_rt']


# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# XGBoost 모델 학습
xgb_model = XGBRegressor(n_estimators=100, random_state=42, importance_type="gain")
xgb_model.fit(X_train, y_train)

# 변수 중요도 확인
importances = xgb_model.feature_importances_
importance_df = pd.DataFrame({'Feature': X.columns, 'Importance': importances})
importance_df = importance_df.sort_values(by='Importance', ascending=False)
print("Feature Importances:\n", importance_df)

# 중요도가 높은 변수 선택(5%이상의 중요도를 가지는)
top_features = importance_df['Feature'].head(int(0.2 * len(importance_df)))

# 차원 축소된 데이터 생성
#X_reduced = X[top_features]
#print("Reduced feature set:\n", X_reduced.head())

import pandas as pd
from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_squared_error
import numpy as np
import matplotlib.pyplot as plt
from itertools import product
import warnings
import logging

# Suppress warnings and logging messages
warnings.filterwarnings("ignore")
logging.getLogger("statsmodels").setLevel(logging.CRITICAL)

# 데이터 경로 설정
data_path = '/content/drive/MyDrive/농협/score백분위, min-max scaling 포함 데이터.csv'
data = pd.read_csv(data_path)

# 날짜 형식 변환
data['bse_dt'] = pd.to_datetime(data['bse_dt'])

# 데이터프레임 복사본 생성 (예측 결과 저장용)
data_with_predictions = data.copy()
data_with_predictions['etf_sor_100_pred_test_only'] = np.nan

# 인덱스를 'bse_dt'와 'etf_iem_cd'의 조합으로 설정
data.set_index(['bse_dt', 'etf_iem_cd'], inplace=True)
data_with_predictions.set_index(['bse_dt', 'etf_iem_cd'], inplace=True)

# RMSE 및 NRMSE 결과 저장할 리스트 초기화
summary_list = []

# ARIMA 모델의 파라미터 설정
p_values = [0, 1,2,3,4]
d_values = [0, 1]
q_values = [0, 1,2,3,4]
seasonal_order = (1, 1, 1, 5)  # 계절성 주기 5일 설정
param_combinations = list(product(p_values, d_values, q_values))

# 외생 변수 설정
exog_vars = ['yr1_tot_pft_rt', 'mxdd_z_sor_100']

# 전체 ETF 목록 가져오기
etf_codes = data.index.get_level_values('etf_iem_cd').unique()

# 각 ETF에 대해 모델 학습 및 예측 수행
for etf_code in etf_codes:
    group = data.xs(etf_code, level='etf_iem_cd').sort_index()

    # 학습 및 테스트 데이터 분할
    split_index = int(len(group) * 0.8)
    train, test = group.iloc[:split_index], group.iloc[split_index:]

    # 외생 변수 분할
    X_train, X_test = train[exog_vars], test[exog_vars]
    y_train, y_test = train['etf_sor_100'], test['etf_sor_100']

    best_rmse, best_order, best_model = float("inf"), None, None

    # 최적의 ARIMA 파라미터 찾기
    for order in param_combinations:
        try:
            model = SARIMAX(y_train, exog=X_train, order=order, seasonal_order=seasonal_order)
            model_fit = model.fit(disp=False, maxiter=50)  # 최적화 반복을 50회로 제한
            forecast_values = model_fit.get_forecast(steps=len(test), exog=X_test).predicted_mean
            test_rmse = np.sqrt(mean_squared_error(y_test, forecast_values))

            if test_rmse < best_rmse:
                best_rmse, best_order, best_model = test_rmse, order, model_fit
        except Exception as e:
            print(f"Error with order {order} for ETF {etf_code}: {e}")
            continue

    # NRMSE 계산
    mean_y_test = np.mean(y_test)
    nrmse = (best_rmse / mean_y_test) * 100 if mean_y_test != 0 else np.nan

    print(f"ETF: {etf_code} - Best Order: {best_order}, Test RMSE: {best_rmse:.2f}, Test NRMSE: {nrmse:.2f}%")

    # 최적 모델로 테스트 세트 예측
    forecast = best_model.get_forecast(steps=len(test), exog=X_test)
    forecast_values = forecast.predicted_mean

    # 예측 결과를 데이터프레임에 업데이트
    for date, value in zip(test.index, forecast_values):
        data_with_predictions.loc[(date, etf_code), 'etf_sor_100_pred_test_only'] = value

    # RMSE 및 NRMSE 결과 저장
    summary_list.append({"ETF": etf_code, "Best Order": best_order, "Test RMSE": best_rmse, "Test NRMSE (%)": nrmse})

    # 그래프 저장 및 출력
    plt.figure(figsize=(12, 6))
    plt.plot(train.index, y_train, label="Train etf_sor_100", color="blue")
    plt.plot(test.index, y_test, label="Actual Test etf_sor_100", color="green")
    plt.plot(test.index, forecast_values, label="Forecast", color="red")
    plt.ylim(0, 100)
    plt.title(f"ETF: {etf_code} - ARIMAX Forecast vs Actual (Test Set)\nBest Order: {best_order}, Test RMSE: {best_rmse:.2f}, Test NRMSE: {nrmse:.2f}%")
    plt.xlabel("Date")
    plt.ylabel("etf_sor_100")
    plt.legend()
    plt.savefig(f"/content/drive/MyDrive/농협/etf_sor_xgboost_arimax2/{etf_code}_forecast.png")
    plt.close()

# RMSE 및 NRMSE 요약 데이터프레임 생성 및 출력
summary_df = pd.DataFrame(summary_list)
print("Summary of RMSE and NRMSE for all ETFs:")
print(summary_df)

# 요약 저장
summary_df.to_csv("/content/drive/MyDrive/농협/etf_sor_xgboost_arimax2/rmse_nrmse_summary_all_etfs.csv", index=False)

# 예측 결과가 저장된 데이터프레임 저장
data_with_predictions.to_csv("/content/drive/MyDrive/농협/etf_sor_xgboost_arimax2/data_with_predictions_all_etfs.csv", index=True)

#crr_z_sor_100_xgboost_arima

import pandas as pd
from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_squared_error
import numpy as np
import matplotlib.pyplot as plt
from itertools import product
import warnings
import logging

# Suppress warnings and logging messages
warnings.filterwarnings("ignore")
logging.getLogger("statsmodels").setLevel(logging.CRITICAL)

# 데이터 경로 설정
data_path = '/content/drive/MyDrive/농협/score백분위, min-max scaling 포함 데이터.csv'
data = pd.read_csv(data_path)

# 날짜 형식 변환
data['bse_dt'] = pd.to_datetime(data['bse_dt'])

# 데이터프레임 복사본 생성 (예측 결과 저장용)
data_with_predictions = data.copy()
data_with_predictions['crr_z_sor_100_pred_test_only'] = np.nan

# 인덱스를 'bse_dt'와 'etf_iem_cd'의 조합으로 설정
data.set_index(['bse_dt', 'etf_iem_cd'], inplace=True)
data_with_predictions.set_index(['bse_dt', 'etf_iem_cd'], inplace=True)

# RMSE 및 NRMSE 결과 저장할 리스트 초기화
summary_list = []

# ARIMA 모델의 파라미터 설정
p_values = [0, 1,2,3,4]
d_values = [0, 1]
q_values = [0, 1,2,3,4]
seasonal_order = (1, 1, 1, 5)  # 계절성 주기 5일 설정
param_combinations = list(product(p_values, d_values, q_values))

# 외생 변수 설정
exog_vars = ["weighted_tot_hld_act_cnt", "vty_z_sor_100", "weighted_dist_hnk_pct90_nmv", "etf_sor_100", "weighted_tco_avg_hld_qty", "weighted_tco_avg_pft_rt"]

# 전체 ETF 목록 가져오기
etf_codes = data.index.get_level_values('etf_iem_cd').unique()

# 각 ETF에 대해 모델 학습 및 예측 수행
for etf_code in etf_codes:
    group = data.xs(etf_code, level='etf_iem_cd').sort_index()

    # 학습 및 테스트 데이터 분할
    split_index = int(len(group) * 0.8)
    train, test = group.iloc[:split_index], group.iloc[split_index:]

    # 외생 변수 분할
    X_train, X_test = train[exog_vars], test[exog_vars]
    y_train, y_test = train['crr_z_sor_100'], test['crr_z_sor_100']

    best_rmse, best_order, best_model = float("inf"), None, None

    # 최적의 ARIMA 파라미터 찾기
    for order in param_combinations:
        try:
            model = SARIMAX(y_train, exog=X_train, order=order, seasonal_order=seasonal_order)
            model_fit = model.fit(disp=False, maxiter=50)  # 최적화 반복을 50회로 제한
            forecast_values = model_fit.get_forecast(steps=len(test), exog=X_test).predicted_mean
            test_rmse = np.sqrt(mean_squared_error(y_test, forecast_values))

            if test_rmse < best_rmse:
                best_rmse, best_order, best_model = test_rmse, order, model_fit
        except Exception as e:
            print(f"Error with order {order} for ETF {etf_code}: {e}")
            continue

    # NRMSE 계산
    mean_y_test = np.mean(y_test)
    nrmse = (best_rmse / mean_y_test) * 100 if mean_y_test != 0 else np.nan

    print(f"ETF: {etf_code} - Best Order: {best_order}, Test RMSE: {best_rmse:.2f}, Test NRMSE: {nrmse:.2f}%")

    # 최적 모델로 테스트 세트 예측
    forecast = best_model.get_forecast(steps=len(test), exog=X_test)
    forecast_values = forecast.predicted_mean

    # 예측 결과를 데이터프레임에 업데이트
    for date, value in zip(test.index, forecast_values):
        data_with_predictions.loc[(date, etf_code), 'crr_z_sor_100_pred_test_only'] = value

    # RMSE 및 NRMSE 결과 저장
    summary_list.append({"ETF": etf_code, "Best Order": best_order, "Test RMSE": best_rmse, "Test NRMSE (%)": nrmse})

    # 그래프 저장 및 출력
    plt.figure(figsize=(12, 6))
    plt.plot(train.index, y_train, label="Train crr_z_sor_100", color="blue")
    plt.plot(test.index, y_test, label="Actual Test crr_z_sor_100", color="green")
    plt.plot(test.index, forecast_values, label="Forecast", color="red")
    plt.ylim(0, 100)
    plt.title(f"ETF: {etf_code} - ARIMAX Forecast vs Actual (Test Set)\nBest Order: {best_order}, Test RMSE: {best_rmse:.2f}, Test NRMSE: {nrmse:.2f}%")
    plt.xlabel("Date")
    plt.ylabel("crr_z_sor_100")
    plt.legend()
    plt.savefig(f"/content/drive/MyDrive/농협/crr_z_sor_100_xgboost_arima/{etf_code}_forecast.png")
    plt.close()

# RMSE 및 NRMSE 요약 데이터프레임 생성 및 출력
summary_df = pd.DataFrame(summary_list)
print("Summary of RMSE and NRMSE for all ETFs:")
print(summary_df)

# 요약 저장
summary_df.to_csv("/content/drive/MyDrive/농협/crr_z_sor_100_xgboost_arima/rmse_nrmse_summary_all_etfs(crr_z_sor_100).csv", index=False)

# 예측 결과가 저장된 데이터프레임 저장
data_with_predictions.to_csv("/content/drive/MyDrive/농협/crr_z_sor_100_xgboost_arima/data_with_predictions_all_etfs(crr_z_sor_100).csv", index=True)

data_with_predictions

#mxdd_z_sor_100_xgboost_arima

import pandas as pd
from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_squared_error
import numpy as np
import matplotlib.pyplot as plt
from itertools import product
import warnings
import logging

# Suppress warnings and logging messages
warnings.filterwarnings("ignore")
logging.getLogger("statsmodels").setLevel(logging.CRITICAL)

# 데이터 경로 설정
data_path = '/content/drive/MyDrive/농협/score백분위, min-max scaling 포함 데이터.csv'
data = pd.read_csv(data_path)

# 날짜 형식 변환
data['bse_dt'] = pd.to_datetime(data['bse_dt'])

# 데이터프레임 복사본 생성 (예측 결과 저장용)
data_with_predictions = data.copy()
data_with_predictions['mxdd_z_sor_100_pred_test_only'] = np.nan

# 인덱스를 'bse_dt'와 'etf_iem_cd'의 조합으로 설정
data.set_index(['bse_dt', 'etf_iem_cd'], inplace=True)
data_with_predictions.set_index(['bse_dt', 'etf_iem_cd'], inplace=True)

# RMSE 및 NRMSE 결과 저장할 리스트 초기화
summary_list = []

# ARIMA 모델의 파라미터 설정
p_values = [0, 1,2,3,4]
d_values = [0, 1]
q_values = [0, 1,2,3,4]
seasonal_order = (1, 1, 1, 5)  # 계절성 주기 5일 설정
param_combinations = list(product(p_values, d_values, q_values))

# 외생 변수 설정
exog_vars = ["vty_z_sor_100", "etf_sor_100", "weighted_tco_avg_pft_rt"]

# 전체 ETF 목록 가져오기
etf_codes = data.index.get_level_values('etf_iem_cd').unique()

# 각 ETF에 대해 모델 학습 및 예측 수행
for etf_code in etf_codes:
    group = data.xs(etf_code, level='etf_iem_cd').sort_index()

    # 학습 및 테스트 데이터 분할
    split_index = int(len(group) * 0.8)
    train, test = group.iloc[:split_index], group.iloc[split_index:]

    # 외생 변수 분할
    X_train, X_test = train[exog_vars], test[exog_vars]
    y_train, y_test = train['mxdd_z_sor_100'], test['mxdd_z_sor_100']

    best_rmse, best_order, best_model = float("inf"), None, None

    # 최적의 ARIMA 파라미터 찾기
    for order in param_combinations:
        try:
            model = SARIMAX(y_train, exog=X_train, order=order, seasonal_order=seasonal_order)
            model_fit = model.fit(disp=False, maxiter=50)  # 최적화 반복을 50회로 제한
            forecast_values = model_fit.get_forecast(steps=len(test), exog=X_test).predicted_mean
            test_rmse = np.sqrt(mean_squared_error(y_test, forecast_values))

            if test_rmse < best_rmse:
                best_rmse, best_order, best_model = test_rmse, order, model_fit
        except Exception as e:
            print(f"Error with order {order} for ETF {etf_code}: {e}")
            continue

    # NRMSE 계산
    mean_y_test = np.mean(y_test)
    nrmse = (best_rmse / mean_y_test) * 100 if mean_y_test != 0 else np.nan

    print(f"ETF: {etf_code} - Best Order: {best_order}, Test RMSE: {best_rmse:.2f}, Test NRMSE: {nrmse:.2f}%")

    # 최적 모델로 테스트 세트 예측
    forecast = best_model.get_forecast(steps=len(test), exog=X_test)
    forecast_values = forecast.predicted_mean

    # 예측 결과를 데이터프레임에 업데이트
    for date, value in zip(test.index, forecast_values):
        data_with_predictions.loc[(date, etf_code), 'mxdd_z_sor_100_pred_test_only'] = value

    # RMSE 및 NRMSE 결과 저장
    summary_list.append({"ETF": etf_code, "Best Order": best_order, "Test RMSE": best_rmse, "Test NRMSE (%)": nrmse})

    # 그래프 저장 및 출력
    plt.figure(figsize=(12, 6))
    plt.plot(train.index, y_train, label="Train mxdd_z_sor_100", color="blue")
    plt.plot(test.index, y_test, label="Actual Test mxdd_z_sor_100", color="green")
    plt.plot(test.index, forecast_values, label="Forecast", color="red")
    plt.ylim(0, 100)
    plt.title(f"ETF: {etf_code} - ARIMAX Forecast vs Actual (Test Set)\nBest Order: {best_order}, Test RMSE: {best_rmse:.2f}, Test NRMSE: {nrmse:.2f}%")
    plt.xlabel("Date")
    plt.ylabel("mxdd_z_sor_100")
    plt.legend()
    plt.savefig(f"/content/drive/MyDrive/농협/mxdd_z_sor_100_xgboost_arima/{etf_code}_forecast.png")
    plt.close()

# RMSE 및 NRMSE 요약 데이터프레임 생성 및 출력
summary_df = pd.DataFrame(summary_list)
print("Summary of RMSE and NRMSE for all ETFs:")
print(summary_df)

# 요약 저장
summary_df.to_csv("/content/drive/MyDrive/농협/mxdd_z_sor_100_xgboost_arima/rmse_nrmse_summary_all_etfs(mxdd_z_sor).csv", index=False)

# 예측 결과가 저장된 데이터프레임 저장
data_with_predictions.to_csv("/content/drive/MyDrive/농협/mxdd_z_sor_100_xgboost_arima/data_with_predictions_all_etfs(mxdd_z_sor).csv", index=True)

# 요약 저장
summary_df.to_csv("/content/drive/MyDrive/농협/mxdd_z_sor_100_xgboost_arima/rmse_nrmse_summary_all_etfs(mxdd_z_sor).csv", index=False)

# 예측 결과가 저장된 데이터프레임 저장
data_with_predictions.to_csv("/content/drive/MyDrive/농협/mxdd_z_sor_100_xgboost_arima/data_with_predictions_all_etfs(mxdd_z_sor).csv", index=True)

#vty_z_sor_100_xgboost_arima

import pandas as pd
from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_squared_error
import numpy as np
import matplotlib.pyplot as plt
from itertools import product
import warnings
import logging

# Suppress warnings and logging messages
warnings.filterwarnings("ignore")
logging.getLogger("statsmodels").setLevel(logging.CRITICAL)

# 데이터 경로 설정
data_path = '/content/drive/MyDrive/농협/score백분위, min-max scaling 포함 데이터.csv'
data = pd.read_csv(data_path)

# 날짜 형식 변환
data['bse_dt'] = pd.to_datetime(data['bse_dt'])

# 데이터프레임 복사본 생성 (예측 결과 저장용)
data_with_predictions = data.copy()
data_with_predictions['vty_z_sor_100_pred_test_only'] = np.nan

# 인덱스를 'bse_dt'와 'etf_iem_cd'의 조합으로 설정
data.set_index(['bse_dt', 'etf_iem_cd'], inplace=True)
data_with_predictions.set_index(['bse_dt', 'etf_iem_cd'], inplace=True)

# RMSE 및 NRMSE 결과 저장할 리스트 초기화
summary_list = []

# ARIMA 모델의 파라미터 설정
p_values = [0, 1,2,3,4]
d_values = [0, 1]
q_values = [0, 1,2,3,4]
seasonal_order = (1, 1, 1, 5)  # 계절성 주기 5일 설정
param_combinations = list(product(p_values, d_values, q_values))

# 외생 변수 설정
exog_vars = ["mxdd_z_sor_100", "yr1_tot_pft_rt", "weighted_tot_hld_act_cnt", "weighted_tco_avg_pft_rt", "weighted_tco_avg_phs_uit_pr"]

# 전체 ETF 목록 가져오기
etf_codes = data.index.get_level_values('etf_iem_cd').unique()

# 각 ETF에 대해 모델 학습 및 예측 수행
for etf_code in etf_codes:
    group = data.xs(etf_code, level='etf_iem_cd').sort_index()

    # 학습 및 테스트 데이터 분할
    split_index = int(len(group) * 0.8)
    train, test = group.iloc[:split_index], group.iloc[split_index:]

    # 외생 변수 분할
    X_train, X_test = train[exog_vars], test[exog_vars]
    y_train, y_test = train['vty_z_sor_100'], test['vty_z_sor_100']

    best_rmse, best_order, best_model = float("inf"), None, None

    # 최적의 ARIMA 파라미터 찾기
    for order in param_combinations:
        try:
            model = SARIMAX(y_train, exog=X_train, order=order, seasonal_order=seasonal_order)
            model_fit = model.fit(disp=False, maxiter=50)  # 최적화 반복을 50회로 제한
            forecast_values = model_fit.get_forecast(steps=len(test), exog=X_test).predicted_mean
            test_rmse = np.sqrt(mean_squared_error(y_test, forecast_values))

            if test_rmse < best_rmse:
                best_rmse, best_order, best_model = test_rmse, order, model_fit
        except Exception as e:
            print(f"Error with order {order} for ETF {etf_code}: {e}")
            continue

    # NRMSE 계산
    mean_y_test = np.mean(y_test)
    nrmse = (best_rmse / mean_y_test) * 100 if mean_y_test != 0 else np.nan

    print(f"ETF: {etf_code} - Best Order: {best_order}, Test RMSE: {best_rmse:.2f}, Test NRMSE: {nrmse:.2f}%")

    # 최적 모델로 테스트 세트 예측
    forecast = best_model.get_forecast(steps=len(test), exog=X_test)
    forecast_values = forecast.predicted_mean

    # 예측 결과를 데이터프레임에 업데이트
    for date, value in zip(test.index, forecast_values):
        data_with_predictions.loc[(date, etf_code), 'vty_z_sor_100_pred_test_only'] = value

    # RMSE 및 NRMSE 결과 저장
    summary_list.append({"ETF": etf_code, "Best Order": best_order, "Test RMSE": best_rmse, "Test NRMSE (%)": nrmse})

    # 그래프 저장 및 출력
    plt.figure(figsize=(12, 6))
    plt.plot(train.index, y_train, label="Train vty_z_sor_100", color="blue")
    plt.plot(test.index, y_test, label="Actual Test vty_z_sor_100", color="green")
    plt.plot(test.index, forecast_values, label="Forecast", color="red")
    plt.ylim(0, 100)
    plt.title(f"ETF: {etf_code} - ARIMAX Forecast vs Actual (Test Set)\nBest Order: {best_order}, Test RMSE: {best_rmse:.2f}, Test NRMSE: {nrmse:.2f}%")
    plt.xlabel("Date")
    plt.ylabel("vty_z_sor_100")
    plt.legend()
    plt.savefig(f"/content/drive/MyDrive/농협/vty_z_sor_100_xgboost_arima/{etf_code}_forecast.png")
    plt.close()

# RMSE 및 NRMSE 요약 데이터프레임 생성 및 출력
summary_df = pd.DataFrame(summary_list)
print("Summary of RMSE and NRMSE for all ETFs:")
print(summary_df)

# 요약 저장
summary_df.to_csv("/content/drive/MyDrive/농협/vty_z_sor_100_xgboost_arima/rmse_nrmse_summary_all_etfs(vty_z_sor_100).csv", index=False)

# 예측 결과가 저장된 데이터프레임 저장
data_with_predictions.to_csv("/content/drive/MyDrive/농협/vty_z_sor_100_xgboost_arima/data_with_predictions_all_etfs(vty_z_sor_100).csv", index=True)

#mm1이 종속변수일때
#선택된 독립변수: mm3_tot_pft_rt, weighted_lss_ivo_rt, weighted_byn_cns_sum_qty, weighted_tot_hld_act_cnt,
#X = data[[col for col in data.columns if 'weighted' in col.lower()] +
#         ['etf_sor_100', 'crr_z_sor_100', 'mxdd_z_sor_100',"vty_z_sor_100", "mm3_tot_pft_rt", "yr1_tot_pft_rt"]]
#y = data['mm1_tot_pft_rt']

import pandas as pd
from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_squared_error
import numpy as np
import matplotlib.pyplot as plt
from itertools import product
import warnings
import logging

# Suppress warnings and logging messages
warnings.filterwarnings("ignore")
logging.getLogger("statsmodels").setLevel(logging.CRITICAL)

# 데이터 경로 설정
data_path = '/content/drive/MyDrive/농협/score백분위, min-max scaling 포함 데이터.csv'
data = pd.read_csv(data_path)

# 날짜 형식 변환
data['bse_dt'] = pd.to_datetime(data['bse_dt'])

# 데이터프레임 복사본 생성 (예측 결과 저장용)
data_with_predictions = data.copy()
data_with_predictions['mm1_tot_pft_rt_pred_test_only'] = np.nan

# 인덱스를 'bse_dt'와 'etf_iem_cd'의 조합으로 설정
data.set_index(['bse_dt', 'etf_iem_cd'], inplace=True)
data_with_predictions.set_index(['bse_dt', 'etf_iem_cd'], inplace=True)

# RMSE 및 NRMSE 결과 저장할 리스트 초기화
summary_list = []

# ARIMA 모델의 파라미터 설정
p_values = [0, 1,2,3,4]
d_values = [0, 1]
q_values = [0, 1,2,3,4]
seasonal_order = (1, 1, 1, 5)  # 계절성 주기 5일 설정
param_combinations = list(product(p_values, d_values, q_values))

# 외생 변수 설정
exog_vars = ['etf_sor_100', 'crr_z_sor_100', 'mxdd_z_sor_100',"vty_z_sor_100", "mm3_tot_pft_rt", "yr1_tot_pft_rt"]

# 전체 ETF 목록 가져오기
etf_codes = data.index.get_level_values('etf_iem_cd').unique()

# 각 ETF에 대해 모델 학습 및 예측 수행
for etf_code in etf_codes:
    group = data.xs(etf_code, level='etf_iem_cd').sort_index()

    # 학습 및 테스트 데이터 분할
    split_index = int(len(group) * 0.8)
    train, test = group.iloc[:split_index], group.iloc[split_index:]

    # 외생 변수 분할
    X_train, X_test = train[exog_vars], test[exog_vars]
    y_train, y_test = train['mm1_tot_pft_rt'], test['mm1_tot_pft_rt']

    best_rmse, best_order, best_model = float("inf"), None, None

    # 최적의 ARIMA 파라미터 찾기
    for order in param_combinations:
        try:
            model = SARIMAX(y_train, exog=X_train, order=order, seasonal_order=seasonal_order)
            model_fit = model.fit(disp=False, maxiter=50)  # 최적화 반복을 50회로 제한
            forecast_values = model_fit.get_forecast(steps=len(test), exog=X_test).predicted_mean
            test_rmse = np.sqrt(mean_squared_error(y_test, forecast_values))

            if test_rmse < best_rmse:
                best_rmse, best_order, best_model = test_rmse, order, model_fit
        except Exception as e:
            print(f"Error with order {order} for ETF {etf_code}: {e}")
            continue

    # NRMSE 계산
    mean_y_test = np.mean(y_test)
    nrmse = (best_rmse / mean_y_test) * 100 if mean_y_test != 0 else np.nan

    print(f"ETF: {etf_code} - Best Order: {best_order}, Test RMSE: {best_rmse:.2f}, Test NRMSE: {nrmse:.2f}%")

    # 최적 모델로 테스트 세트 예측
    forecast = best_model.get_forecast(steps=len(test), exog=X_test)
    forecast_values = forecast.predicted_mean

    # 예측 결과를 데이터프레임에 업데이트
    for date, value in zip(test.index, forecast_values):
        data_with_predictions.loc[(date, etf_code), 'mm1_tot_pft_rt_pred_test_only'] = value

    # RMSE 및 NRMSE 결과 저장
    summary_list.append({"ETF": etf_code, "Best Order": best_order, "Test RMSE": best_rmse, "Test NRMSE (%)": nrmse})

    # Graph generation with automatic y-axis limits
    plt.figure(figsize=(12, 6))
    plt.plot(train.index, y_train, label="Train mm1_tot_pft_rt", color="blue")
    plt.plot(test.index, y_test, label="Actual Test mm1_tot_pft_rt", color="green")
    plt.plot(test.index, forecast_values, label="Forecast", color="red")
    # Removed or commented out the line below
    # plt.ylim(0, 100)  # This line sets the y-axis limits, which is now removed
    plt.title(f"ETF: {etf_code} - ARIMAX Forecast vs Actual (Test Set)\nBest Order: {best_order}, Test RMSE: {best_rmse:.2f}, Test NRMSE: {nrmse:.2f}%")
    plt.xlabel("Date")
    plt.ylabel("mm1_tot_pft_rt")
    plt.legend()
    plt.savefig(f"/content/drive/MyDrive/농협/mm1_tot_pft_rt_xgboost_arima/{etf_code}_forecast.png")
    plt.close()

# RMSE 및 NRMSE 요약 데이터프레임 생성 및 출력
summary_df = pd.DataFrame(summary_list)
print("Summary of RMSE and NRMSE for all ETFs:")
print(summary_df)

# 요약 저장
summary_df.to_csv("/content/drive/MyDrive/농협/mm1_tot_pft_rt_xgboost_arima/rmse_nrmse_summary_all_etfs(mm1_tot_pft_rt).csv", index=False)

# 예측 결과가 저장된 데이터프레임 저장
data_with_predictions.to_csv("/content/drive/MyDrive/농협/mm1_tot_pft_rt_xgboost_arima/data_with_predictions_all_etfs(mm1_tot_pft_rt).csv", index=True)

#mm3이 종속변수일때
#선택된 독립변수: weighted_lss_ivo_rt, yr1_tot_pft_rt, mm1_tot_pft_rt, etf_sor_100, weighted_tco_avg_eal_pls,weighted_sby_bse_xcg_rt
#X = data[[col for col in data.columns if 'weighted' in col.lower()] +
#         ['etf_sor_100', 'crr_z_sor_100', 'mxdd_z_sor_100',"vty_z_sor_100", "mm1_tot_pft_rt", "yr1_tot_pft_rt"]]
#y = data['mm3_tot_pft_rt']

import pandas as pd
from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_squared_error
import numpy as np
import matplotlib.pyplot as plt
from itertools import product
import warnings
import logging

# Suppress warnings and logging messages
warnings.filterwarnings("ignore")
logging.getLogger("statsmodels").setLevel(logging.CRITICAL)

# 데이터 경로 설정
data_path = '/content/drive/MyDrive/농협/score백분위, min-max scaling 포함 데이터.csv'
data = pd.read_csv(data_path)

# 날짜 형식 변환
data['bse_dt'] = pd.to_datetime(data['bse_dt'])

# 데이터프레임 복사본 생성 (예측 결과 저장용)
data_with_predictions = data.copy()
data_with_predictions['mm3_tot_pft_rt_pred_test_only'] = np.nan

# 인덱스를 'bse_dt'와 'etf_iem_cd'의 조합으로 설정
data.set_index(['bse_dt', 'etf_iem_cd'], inplace=True)
data_with_predictions.set_index(['bse_dt', 'etf_iem_cd'], inplace=True)

# RMSE 및 NRMSE 결과 저장할 리스트 초기화
summary_list = []

# ARIMA 모델의 파라미터 설정
p_values = [0, 1,2,3,4]
d_values = [0, 1]
q_values = [0, 1,2,3,4]
seasonal_order = (1, 1, 1, 5)  # 계절성 주기 5일 설정
param_combinations = list(product(p_values, d_values, q_values))

# 외생 변수 설정
exog_vars = ['etf_sor_100', 'crr_z_sor_100', 'mxdd_z_sor_100',"vty_z_sor_100", "mm1_tot_pft_rt", "yr1_tot_pft_rt"]

# 전체 ETF 목록 가져오기
etf_codes = data.index.get_level_values('etf_iem_cd').unique()

# 각 ETF에 대해 모델 학습 및 예측 수행
for etf_code in etf_codes:
    group = data.xs(etf_code, level='etf_iem_cd').sort_index()

    # 학습 및 테스트 데이터 분할
    split_index = int(len(group) * 0.8)
    train, test = group.iloc[:split_index], group.iloc[split_index:]

    # 외생 변수 분할
    X_train, X_test = train[exog_vars], test[exog_vars]
    y_train, y_test = train['mm3_tot_pft_rt'], test['mm3_tot_pft_rt']

    best_rmse, best_order, best_model = float("inf"), None, None

    # 최적의 ARIMA 파라미터 찾기
    for order in param_combinations:
        try:
            model = SARIMAX(y_train, exog=X_train, order=order, seasonal_order=seasonal_order)
            model_fit = model.fit(disp=False, maxiter=50)  # 최적화 반복을 50회로 제한
            forecast_values = model_fit.get_forecast(steps=len(test), exog=X_test).predicted_mean
            test_rmse = np.sqrt(mean_squared_error(y_test, forecast_values))

            if test_rmse < best_rmse:
                best_rmse, best_order, best_model = test_rmse, order, model_fit
        except Exception as e:
            print(f"Error with order {order} for ETF {etf_code}: {e}")
            continue

    # NRMSE 계산
    mean_y_test = np.mean(y_test)
    nrmse = (best_rmse / mean_y_test) * 100 if mean_y_test != 0 else np.nan

    print(f"ETF: {etf_code} - Best Order: {best_order}, Test RMSE: {best_rmse:.2f}, Test NRMSE: {nrmse:.2f}%")

    # 최적 모델로 테스트 세트 예측
    forecast = best_model.get_forecast(steps=len(test), exog=X_test)
    forecast_values = forecast.predicted_mean

    # 예측 결과를 데이터프레임에 업데이트
    for date, value in zip(test.index, forecast_values):
        data_with_predictions.loc[(date, etf_code), 'mm3_tot_pft_rt_pred_test_only'] = value

    # RMSE 및 NRMSE 결과 저장
    summary_list.append({"ETF": etf_code, "Best Order": best_order, "Test RMSE": best_rmse, "Test NRMSE (%)": nrmse})

    # Graph generation with automatic y-axis limits
    plt.figure(figsize=(12, 6))
    plt.plot(train.index, y_train, label="Train mm3_tot_pft_rt", color="blue")
    plt.plot(test.index, y_test, label="Actual Test mm3_tot_pft_rt", color="green")
    plt.plot(test.index, forecast_values, label="Forecast", color="red")
    # Removed or commented out the line below
    # plt.ylim(0, 100)  # This line sets the y-axis limits, which is now removed
    plt.title(f"ETF: {etf_code} - ARIMAX Forecast vs Actual (Test Set)\nBest Order: {best_order}, Test RMSE: {best_rmse:.2f}, Test NRMSE: {nrmse:.2f}%")
    plt.xlabel("Date")
    plt.ylabel("mm3_tot_pft_rt")
    plt.legend()
    plt.savefig(f"/content/drive/MyDrive/농협/mm3_tot_pft_rt_xgboost_arima/{etf_code}_forecast.png")
    plt.close()

# RMSE 및 NRMSE 요약 데이터프레임 생성 및 출력
summary_df = pd.DataFrame(summary_list)
print("Summary of RMSE and NRMSE for all ETFs:")
print(summary_df)

# 요약 저장
summary_df.to_csv("/content/drive/MyDrive/농협/mm3_tot_pft_rt_xgboost_arima/rmse_nrmse_summary_all_etfs(mm3_tot_pft_rt).csv", index=False)

# 예측 결과가 저장된 데이터프레임 저장
data_with_predictions.to_csv("/content/drive/MyDrive/농협/mm3_tot_pft_rt_xgboost_arima/data_with_predictions_all_etfs(mm3_tot_pft_rt).csv", index=True)

#yr1이 종속변수일때
#선택된 독립변수: weighted_bf_dd_cmp_ind_rt, weighted_sll_cns_sum_qty, etf_sor_100, weighted_iem_end_pr, weighted_bf_dd_cmp_ind_pr, mm1_tot_pft_rt,  vty_z_sor_100
#X = data[[col for col in data.columns if 'weighted' in col.lower()] +
#         ['etf_sor_100', 'crr_z_sor_100', 'mxdd_z_sor_100',"vty_z_sor_100", "mm1_tot_pft_rt", "mm3_tot_pft_rt"]]
#y = data['yr1_tot_pft_rt']

import pandas as pd
from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_squared_error
import numpy as np
import matplotlib.pyplot as plt
from itertools import product
import warnings
import logging

# Suppress warnings and logging messages
warnings.filterwarnings("ignore")
logging.getLogger("statsmodels").setLevel(logging.CRITICAL)

# 데이터 경로 설정
data_path = '/content/drive/MyDrive/농협/score백분위, min-max scaling 포함 데이터.csv'
data = pd.read_csv(data_path)

# 날짜 형식 변환
data['bse_dt'] = pd.to_datetime(data['bse_dt'])

# 데이터프레임 복사본 생성 (예측 결과 저장용)
data_with_predictions = data.copy()
data_with_predictions['yr1_tot_pft_rt_pred_test_only'] = np.nan

# 인덱스를 'bse_dt'와 'etf_iem_cd'의 조합으로 설정
data.set_index(['bse_dt', 'etf_iem_cd'], inplace=True)
data_with_predictions.set_index(['bse_dt', 'etf_iem_cd'], inplace=True)

# RMSE 및 NRMSE 결과 저장할 리스트 초기화
summary_list = []

# ARIMA 모델의 파라미터 설정
p_values = [0, 1,2,3,4]
d_values = [0, 1]
q_values = [0, 1,2,3,4]
seasonal_order = (1, 1, 1, 5)  # 계절성 주기 5일 설정
param_combinations = list(product(p_values, d_values, q_values))

# 외생 변수 설정
exog_vars = ['etf_sor_100', 'crr_z_sor_100', 'mxdd_z_sor_100',"vty_z_sor_100", "mm1_tot_pft_rt", "mm3_tot_pft_rt"]

# 전체 ETF 목록 가져오기
etf_codes = data.index.get_level_values('etf_iem_cd').unique()

# 각 ETF에 대해 모델 학습 및 예측 수행
for etf_code in etf_codes:
    group = data.xs(etf_code, level='etf_iem_cd').sort_index()

    # 학습 및 테스트 데이터 분할
    split_index = int(len(group) * 0.8)
    train, test = group.iloc[:split_index], group.iloc[split_index:]

    # 외생 변수 분할
    X_train, X_test = train[exog_vars], test[exog_vars]
    y_train, y_test = train['yr1_tot_pft_rt'], test['yr1_tot_pft_rt']

    best_rmse, best_order, best_model = float("inf"), None, None

    # 최적의 ARIMA 파라미터 찾기
    for order in param_combinations:
        try:
            model = SARIMAX(y_train, exog=X_train, order=order, seasonal_order=seasonal_order)
            model_fit = model.fit(disp=False, maxiter=50)  # 최적화 반복을 50회로 제한
            forecast_values = model_fit.get_forecast(steps=len(test), exog=X_test).predicted_mean
            test_rmse = np.sqrt(mean_squared_error(y_test, forecast_values))

            if test_rmse < best_rmse:
                best_rmse, best_order, best_model = test_rmse, order, model_fit
        except Exception as e:
            print(f"Error with order {order} for ETF {etf_code}: {e}")
            continue

    # NRMSE 계산
    mean_y_test = np.mean(y_test)
    nrmse = (best_rmse / mean_y_test) * 100 if mean_y_test != 0 else np.nan

    print(f"ETF: {etf_code} - Best Order: {best_order}, Test RMSE: {best_rmse:.2f}, Test NRMSE: {nrmse:.2f}%")

    # 최적 모델로 테스트 세트 예측
    forecast = best_model.get_forecast(steps=len(test), exog=X_test)
    forecast_values = forecast.predicted_mean

    # 예측 결과를 데이터프레임에 업데이트
    for date, value in zip(test.index, forecast_values):
        data_with_predictions.loc[(date, etf_code), 'yr1_tot_pft_rt_pred_test_only'] = value

    # RMSE 및 NRMSE 결과 저장
    summary_list.append({"ETF": etf_code, "Best Order": best_order, "Test RMSE": best_rmse, "Test NRMSE (%)": nrmse})

    # Graph generation with automatic y-axis limits
    plt.figure(figsize=(12, 6))
    plt.plot(train.index, y_train, label="Train yr1_tot_pft_rt", color="blue")
    plt.plot(test.index, y_test, label="Actual Test yr1_tot_pft_rt", color="green")
    plt.plot(test.index, forecast_values, label="Forecast", color="red")
    # Removed or commented out the line below
    # plt.ylim(0, 100)  # This line sets the y-axis limits, which is now removed
    plt.title(f"ETF: {etf_code} - ARIMAX Forecast vs Actual (Test Set)\nBest Order: {best_order}, Test RMSE: {best_rmse:.2f}, Test NRMSE: {nrmse:.2f}%")
    plt.xlabel("Date")
    plt.ylabel("yr1_tot_pft_rt")
    plt.legend()
    plt.savefig(f"/content/drive/MyDrive/농협/yr1_tot_pft_rt_xgboost_arima/{etf_code}_forecast.png")
    plt.close()

# RMSE 및 NRMSE 요약 데이터프레임 생성 및 출력
summary_df = pd.DataFrame(summary_list)
print("Summary of RMSE and NRMSE for all ETFs:")
print(summary_df)

# 요약 저장
summary_df.to_csv("/content/drive/MyDrive/농협/yr1_tot_pft_rt_xgboost_arima/rmse_nrmse_summary_all_etfs(yr1_tot_pft_rt).csv", index=False)

# 예측 결과가 저장된 데이터프레임 저장
data_with_predictions.to_csv("/content/drive/MyDrive/농협/yr1_tot_pft_rt_xgboost_arima/data_with_predictions_all_etfs(yr1_tot_pft_rt).csv", index=True)